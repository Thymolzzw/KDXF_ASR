1
00:00:00,512 --> 00:00:02,304
 In the last video, you learned about.

2
00:00:02,560 --> 00:00:06,144
 The sliding windows object detection algorithm using a constant.

3
00:00:06,400 --> 00:00:07,936
 But we saw that it was too slow.

4
00:00:08,192 --> 00:00:09,216
 In this video.

5
00:00:09,472 --> 00:00:11,776
 You learn how to implement that algorithm.

6
00:00:12,032 --> 00:00:13,056
 Constitutionally.

7
00:00:13,312 --> 00:00:14,080
 Let's see what this means.

8
00:00:14,336 --> 00:00:20,480
 Needs to build up toward the convolutional implementation of sliding windows. Let's first see how you can do.

9
00:00:20,736 --> 00:00:23,296
 Internet fully connected layers in your neural network.

10
00:00:23,552 --> 00:00:25,600
 Into convolutional layers.

11
00:00:26,112 --> 00:00:30,208
 We'll do that first on this slide. And then the next slide will use the ideas from this slide.

12
00:00:30,464 --> 00:00:32,000
 To show you the convolution.

13
00:00:33,536 --> 00:00:36,352
 So let's say that your object detection algorithm.

14
00:00:36,608 --> 00:00:42,752
 Input some 14 by 14 by three images. This is quite small, but just for illustrative purposes. And let's say.

15
00:00:43,008 --> 00:00:44,288
 Say it then uses um.

16
00:00:44,544 --> 00:00:47,616
 Fiber, five filters. And let's say uses 16 of them.

17
00:00:48,128 --> 00:00:51,712
 To map it from 14 by 14 by three to 10 by 10 by 16.

18
00:00:52,480 --> 00:00:56,832
 And then does a 2 by two max pooling to reduce it to five or five by 16.

19
00:00:57,344 --> 00:00:59,648
 Then um, has a fully connected layer.

20
00:01:00,160 --> 00:01:00,672
 To connect.

21
00:01:00,928 --> 00:01:02,976
 To fall into units that are not fully connected there.

22
00:01:03,488 --> 00:01:04,768
 And then finally outputs.

23
00:01:05,024 --> 00:01:05,536
 Uh, why?

24
00:01:05,792 --> 00:01:06,560
 Using a software.

25
00:01:08,096 --> 00:01:11,936
 In order to make the change, we need to in a second, I'm going to.

26
00:01:12,192 --> 00:01:14,752
 Change this picture a little bit. And instead I'm going to.

27
00:01:15,008 --> 00:01:16,288
 V y as um.

28
00:01:16,800 --> 00:01:17,824
 Four numbers.

29
00:01:18,336 --> 00:01:22,432
 Corresponding to the class probabilities of the four classes that are.

30
00:01:22,688 --> 00:01:23,968
 The salt tax units is closed.

31
00:01:24,224 --> 00:01:24,736
 Lost by a mile.

32
00:01:24,992 --> 00:01:25,504
 A month.

33
00:01:26,784 --> 00:01:28,576
 Um, and did the full classes.

34
00:01:29,344 --> 00:01:29,856
 Could be.

35
00:01:30,624 --> 00:01:31,392
 Pedestrian.

36
00:01:31,648 --> 00:01:32,928
 Car, motorcycle and.

37
00:01:33,184 --> 00:01:33,696
 Background.

38
00:01:33,952 --> 00:01:34,464
 Or something else.

39
00:01:36,000 --> 00:01:39,584
 Now what I like to do is show how these layers.

40
00:01:39,840 --> 00:01:41,376
 Can be turned into.

41
00:01:41,632 --> 00:01:42,400
 Convolutional layers.

42
00:01:42,656 --> 00:01:47,520
 Yes. So the confident with the drawer, same as before. For the first few layers.

43
00:01:47,776 --> 00:01:52,384
 And now one way of implementing this next layer is fully connected layer.

44
00:01:52,640 --> 00:01:54,176
 Is to implement this as a.

45
00:01:54,432 --> 00:01:55,456
 Five by five.

46
00:01:55,712 --> 00:01:56,480
 Filter.

47
00:01:57,248 --> 00:02:00,320
 Unless use 405 by five.

48
00:02:01,600 --> 00:02:02,368
 Filters.

49
00:02:02,624 --> 00:02:05,440
 So if you take a 5 by five by 16 image.

50
00:02:05,696 --> 00:02:08,000
 And convolve it with a 5 by five filter.

51
00:02:08,256 --> 00:02:10,304
 Remember a 5 by five filter.

52
00:02:10,560 --> 00:02:12,864
 Is implemented as five by five.

53
00:02:13,376 --> 00:02:14,144
 By 16.

54
00:02:14,912 --> 00:02:21,056
 Because our convention is that the filter looks across all 16 channels. So there's 16 and just 16.

55
00:02:21,568 --> 00:02:22,080
 Must match.

56
00:02:22,592 --> 00:02:25,152
 And so the output will be one by one.

57
00:02:25,664 --> 00:02:26,432
 And if you have.

58
00:02:26,688 --> 00:02:27,712
 400.

59
00:02:27,968 --> 00:02:30,272
 Of these five by five by 16 filters.

60
00:02:30,784 --> 00:02:33,600
 Then the output dimension is going to be one by one.

61
00:02:34,368 --> 00:02:35,136
 By 400.

62
00:02:35,904 --> 00:02:38,720
 And so rather than viewing these 400.

63
00:02:38,976 --> 00:02:39,744
 As um.

64
00:02:40,000 --> 00:02:43,840
 Just a set of notes. We are going to view this as a 1 by one by 400.

65
00:02:44,608 --> 00:02:45,120
 Volume.

66
00:02:45,632 --> 00:02:47,936
 And mathematically, this is the same.

67
00:02:48,192 --> 00:02:49,984
 As a fully connected layer.

68
00:02:50,496 --> 00:02:52,544
 Because each of these 400 notes.

69
00:02:52,800 --> 00:02:53,312
 Has.

70
00:02:53,568 --> 00:02:55,104
 A filter of dimension.

71
00:02:55,360 --> 00:02:56,896
 Five by five by 16.

72
00:02:57,408 --> 00:03:00,224
 And so each of those 400 values is some.

73
00:03:00,480 --> 00:03:02,272
 Your arbitrary linear function.

74
00:03:02,528 --> 00:03:04,576
 Of these five by five by 16.

75
00:03:05,088 --> 00:03:06,112
 Um, activation.

76
00:03:06,368 --> 00:03:07,136
 Friends from there previously.

77
00:03:07,648 --> 00:03:10,464
 Next to implement the next convolutional layer.

78
00:03:10,976 --> 00:03:12,256
 We're going to implement a.

79
00:03:12,512 --> 00:03:13,792
 One by one convolution.

80
00:03:14,304 --> 00:03:15,328
 And if you have.

81
00:03:15,584 --> 00:03:17,632
 401 by one filters.

82
00:03:17,888 --> 00:03:18,400
 Then.

83
00:03:18,656 --> 00:03:20,704
 With 400 filters. The next layer.

84
00:03:20,960 --> 00:03:21,984
 Will again be.

85
00:03:22,240 --> 00:03:23,264
 One by one.

86
00:03:23,776 --> 00:03:24,544
 By 400.

87
00:03:25,056 --> 00:03:26,848
 So that gives you this next.

88
00:03:27,872 --> 00:03:28,896
 Fully connected there.

89
00:03:29,152 --> 00:03:30,176
 And then finally.

90
00:03:30,432 --> 00:03:31,712
 We're going to have um.

91
00:03:32,224 --> 00:03:33,760
 Another one by one.

92
00:03:34,528 --> 00:03:35,040
 Filter.

93
00:03:35,296 --> 00:03:37,088
 Followed by a soft max activation.

94
00:03:37,344 --> 00:03:37,856
 So as to.

95
00:03:38,368 --> 00:03:40,416
 Give a 1 by one by full volume.

96
00:03:41,184 --> 00:03:42,464
 Uh, to take the place of.

97
00:03:42,720 --> 00:03:45,024
 These four numbers that the network was out.

98
00:03:46,304 --> 00:03:48,352
 So this shows how you can take these.

99
00:03:48,608 --> 00:03:49,888
 Fully connected layers.

100
00:03:50,144 --> 00:03:51,424
 And implement using.

101
00:03:52,192 --> 00:03:53,472
 Convolutional layers.

102
00:03:53,984 --> 00:03:55,008
 So that these.

103
00:03:55,264 --> 00:03:57,056
 A set of units instead.

104
00:03:57,312 --> 00:03:59,872
 Are now implemented as one by one by 400.

105
00:04:00,128 --> 00:04:01,664
 Hundred and one by one by.

106
00:04:01,920 --> 00:04:02,432
 For.

107
00:04:02,944 --> 00:04:03,712
 Volumes.

108
00:04:03,968 --> 00:04:05,504
 Armed with this conversion.

109
00:04:05,760 --> 00:04:07,040
 Let's see how you can.

110
00:04:07,296 --> 00:04:08,320
 Have a convolution.

111
00:04:08,576 --> 00:04:10,624
 Implementation of sliding windows object.

112
00:04:10,880 --> 00:04:11,392
 Object detection.

113
00:04:12,672 --> 00:04:18,047
 And the presentation on this slide is based on the over feet paper reference at the bottom.

114
00:04:18,303 --> 00:04:20,351
 By pierce, anthony, david, oregon.

115
00:04:20,607 --> 00:04:23,167
 Zhangjiang Michael matthew, robert fergusson, your honor.

116
00:04:24,447 --> 00:04:25,727
 Let's say that your.

117
00:04:25,983 --> 00:04:29,823
 Sliding windows, confident inputs, 14 by 14 by three in.

118
00:04:30,335 --> 00:04:30,847
 Teachers and.

119
00:04:31,103 --> 00:04:34,687
 Uh, again, I'm just using small numbers, like a 14 by 14.

120
00:04:35,711 --> 00:04:36,735
 In this slide.

121
00:04:36,991 --> 00:04:37,759
 Uh, may need to make the.

122
00:04:38,271 --> 00:04:39,295
 Numbers and illustration.

123
00:04:39,551 --> 00:04:40,063
 Which is simpler.

124
00:04:40,831 --> 00:04:42,111
 So as before.

125
00:04:42,367 --> 00:04:43,903
 You have a new network.

126
00:04:44,159 --> 00:04:46,719
 As follows. That eventually outputs a.

127
00:04:46,975 --> 00:04:48,511
 One by one by full volume.

128
00:04:49,279 --> 00:04:50,303
 Uh, which is the output of.

129
00:04:50,815 --> 00:04:51,327
 Fuel cell fax.

130
00:04:52,351 --> 00:04:54,655
 And begin to simplify the drawing here.

131
00:04:55,167 --> 00:04:58,239
 14 by 14 by three is technically a volume.

132
00:04:58,495 --> 00:04:59,519
 Five by five or.

133
00:04:59,775 --> 00:05:02,335
 10 by 10 by 16. A second. Clear volume.

134
00:05:02,591 --> 00:05:07,199
 But to simplify the drawing for this slide, I'm just gonna draw the front face of these volumes.

135
00:05:07,455 --> 00:05:08,479
 So so joy.

136
00:05:08,735 --> 00:05:10,527
 You know, one by one by 400 volumes.

137
00:05:11,039 --> 00:05:11,807
 I'm just going to order.

138
00:05:12,063 --> 00:05:12,831
 One by one.

139
00:05:13,343 --> 00:05:13,855
 Pots of all of you.

140
00:05:14,111 --> 00:05:15,391
 Of these rights, which is a.

141
00:05:15,647 --> 00:05:16,159
 Drop to.

142
00:05:16,415 --> 00:05:16,927
 It's really compelling.

143
00:05:17,951 --> 00:05:18,975
 Drawings just for this slide.

144
00:05:19,231 --> 00:05:25,119
 So let's say that you're confident inputs, 14 by 14 images, or 14 by 14 by three images.

145
00:05:25,375 --> 00:05:26,655
 And your test set images.

146
00:05:26,911 --> 00:05:28,191
 Which is 16 by 16 by.

147
00:05:29,215 --> 00:05:31,519
 So now added that yellow stripe.

148
00:05:31,775 --> 00:05:32,543
 To the border.

149
00:05:32,799 --> 00:05:33,311
 Of this image.

150
00:05:33,567 --> 00:05:36,127
 So in the original sliding windows algorithm.

151
00:05:36,383 --> 00:05:37,151
 You might.

152
00:05:37,407 --> 00:05:38,175
 Want to.

153
00:05:38,431 --> 00:05:40,479
 Uh, input the blue region.

154
00:05:40,991 --> 00:05:44,831
 Into a confident and run at once to generate classification 01.

155
00:05:45,343 --> 00:05:48,415
 And then slide it down a bit less. Use a string of two pixels.

156
00:05:48,927 --> 00:05:49,695
 And um.

157
00:05:50,463 --> 00:05:51,487
 And then you might slide.

158
00:05:51,743 --> 00:05:55,071
 Uh, oh, and then you might slide that to the right by two pixels.

159
00:05:55,327 --> 00:05:56,607
 To input this.

160
00:05:56,863 --> 00:06:00,447
 Green rectangle into the continent and rerun the whole continent.

161
00:06:00,703 --> 00:06:02,495
 And get another label, 01.

162
00:06:03,007 --> 00:06:04,031
 And then you might.

163
00:06:04,287 --> 00:06:06,847
 Input this orange region.

164
00:06:07,871 --> 00:06:08,895
 Into the confident.

165
00:06:09,663 --> 00:06:12,223
 And run it one more time to get another label.

166
00:06:12,991 --> 00:06:15,039
 And then do the fourth and final time.

167
00:06:15,295 --> 00:06:17,087
 With this the lower right?

168
00:06:17,855 --> 00:06:18,367
 Um.

169
00:06:18,623 --> 00:06:19,135
 Now.

170
00:06:19,391 --> 00:06:20,159
 Purple square.

171
00:06:21,439 --> 00:06:25,791
 And so to run sliding windows on this 16 by 16 by sea image, it's pretty small image.

172
00:06:26,047 --> 00:06:26,815
 You run.

173
00:06:27,071 --> 00:06:28,863
 This continent from above.

174
00:06:29,119 --> 00:06:30,143
 Four times in order to.

175
00:06:30,399 --> 00:06:31,679
 Get four labels.

176
00:06:32,191 --> 00:06:37,823
 But it turns out a lot of this computation done by these four confidence is highly duplicated.

177
00:06:38,591 --> 00:06:42,431
 So what the convolution and implementation of sliding windows does is it allows.

178
00:06:42,687 --> 00:06:43,455
 These four.

179
00:06:43,711 --> 00:06:45,503
 Um, for it passes into confident.

180
00:06:45,759 --> 00:06:46,783
 To share a lot of money.

181
00:06:47,039 --> 00:06:47,551
 Computation.

182
00:06:48,063 --> 00:06:49,599
 Specifically, here's what you can do.

183
00:06:50,111 --> 00:06:52,159
 You can take the confidence and just.

184
00:06:52,415 --> 00:06:52,927
 Run it.

185
00:06:53,183 --> 00:06:54,719
 Same parameters the same.

186
00:06:54,975 --> 00:06:57,791
 Five by five by filters are also 16.

187
00:06:58,047 --> 00:06:59,071
 Five by five filters.

188
00:06:59,327 --> 00:07:00,095
 And run it.

189
00:07:00,351 --> 00:07:00,863
 And now.

190
00:07:01,119 --> 00:07:02,143
 You can have a.

191
00:07:02,399 --> 00:07:04,703
 12 by 12 by 16 output volume.

192
00:07:04,959 --> 00:07:09,055
 And then do the max pull, same as before. Now you have a 6 by six by 16.

193
00:07:09,567 --> 00:07:10,847
 Run through your same.

194
00:07:11,103 --> 00:07:14,431
 405 by five filters to get now your.

195
00:07:14,687 --> 00:07:15,711
 Two by two.

196
00:07:15,967 --> 00:07:16,735
 By 40.

197
00:07:16,991 --> 00:07:17,503
 Volume.

198
00:07:18,271 --> 00:07:20,319
 So now, instead of a 1 by one.

199
00:07:20,831 --> 00:07:23,135
 So now, instead of a 1 by one, by.

200
00:07:23,391 --> 00:07:24,159
 400.

201
00:07:24,415 --> 00:07:24,927
 Volume.

202
00:07:25,439 --> 00:07:26,207
 You have instead a.

203
00:07:26,463 --> 00:07:27,487
 Two by two.

204
00:07:27,743 --> 00:07:28,255
 By 400.

205
00:07:28,511 --> 00:07:29,279
 Hundred volume.

206
00:07:30,047 --> 00:07:32,095
 Uh, run it through one by one filter.

207
00:07:32,607 --> 00:07:33,631
 Gives you another.

208
00:07:33,887 --> 00:07:36,447
 Two by two by 400 instead of one by one by 400.

209
00:07:36,703 --> 00:07:37,215
 Hundred.

210
00:07:37,471 --> 00:07:38,495
 Do that one more time.

211
00:07:38,751 --> 00:07:39,775
 And now you're left with a.

212
00:07:40,543 --> 00:07:42,847
 Two by two by four output volume. Is that one guy?

213
00:07:44,383 --> 00:07:48,735
 And it turns out that this blue one by one by four subset.

214
00:07:48,991 --> 00:07:51,807
 Gives you the result of running on the upper left hand.

215
00:07:52,063 --> 00:07:53,855
 Corner, 14 by 14 image.

216
00:07:54,623 --> 00:07:55,903
 This upper right?

217
00:07:56,927 --> 00:07:59,231
 One by one by four volume gives you.

218
00:07:59,487 --> 00:08:01,023
 The upper right result.

219
00:08:01,535 --> 00:08:02,815
 Um, the lower left.

220
00:08:03,327 --> 00:08:03,839
 Gives you.

221
00:08:04,095 --> 00:08:08,447
 The results of implementing the content on the lower left, 14 by 14 region.

222
00:08:08,959 --> 00:08:09,983
 And the lower right?

223
00:08:10,751 --> 00:08:14,079
 One by one by four volume gives you the same results as running.

224
00:08:14,335 --> 00:08:16,895
 The uh confident on the lower right for the breakfast.

225
00:08:17,919 --> 00:08:22,527
 And if you step through all the steps of the calculation, let's look at the green example.

226
00:08:23,039 --> 00:08:24,319
 If you had cropped out.

227
00:08:24,575 --> 00:08:27,647
 Just this region and pass it through the confident.

228
00:08:27,903 --> 00:08:28,927
 Through the confident on Top.

229
00:08:29,183 --> 00:08:30,975
 Than the first layer is activation.

230
00:08:31,231 --> 00:08:31,999
 Would have been.

231
00:08:32,255 --> 00:08:33,535
 Exactly this region.

232
00:08:34,303 --> 00:08:35,839
 The next layer is activation of the masses.

233
00:08:36,095 --> 00:08:36,863
 Cooling would have been exactly.

234
00:08:37,119 --> 00:08:38,143
 Actually, this region.

235
00:08:38,655 --> 00:08:39,423
 And then um.

236
00:08:39,679 --> 00:08:40,447
 The next layer.

237
00:08:40,703 --> 00:08:41,215
 The next layer.

238
00:08:41,727 --> 00:08:46,847
 Would have been as follows. So what this process does, what this confidential Information does is.

239
00:08:47,103 --> 00:08:48,895
 Instead of forcing you to run.

240
00:08:49,151 --> 00:08:50,175
 Forward propagation.

241
00:08:50,431 --> 00:08:53,247
 On for subset of the input image independently.

242
00:08:54,015 --> 00:08:55,039
 Instead, it.

243
00:08:55,295 --> 00:08:57,855
 Combines all four into one form of computation.

244
00:08:58,111 --> 00:08:59,903
 And shares a lot of computation.

245
00:09:00,159 --> 00:09:02,207
 In the regions of the image that are common.

246
00:09:02,719 --> 00:09:04,511
 To all four of the um.

247
00:09:04,767 --> 00:09:05,535
 14 by 14 points.

248
00:09:06,047 --> 00:09:06,559
 As we saw here.

249
00:09:07,839 --> 00:09:13,983
 Now let's go through a bigger example. Let's say you now want to run sliding windows on a 28 by 28 by three.

250
00:09:15,007 --> 00:09:16,543
 It turns out if you run.

251
00:09:16,799 --> 00:09:18,335
 For a profit. The same way.

252
00:09:18,591 --> 00:09:21,919
 Then you end up with an eight by eight by four output.

253
00:09:22,175 --> 00:09:24,991
 And this corresponds to running sliding windows with.

254
00:09:25,503 --> 00:09:27,039
 That 14 by 14 region.

255
00:09:27,807 --> 00:09:30,367
 And that corresponds to running sliding windows.

256
00:09:30,879 --> 00:09:31,903
 First on that.

257
00:09:32,159 --> 00:09:32,927
 Region.

258
00:09:33,183 --> 00:09:34,975
 Just giving you the output corresponding.

259
00:09:35,231 --> 00:09:36,511
 On the upper left hand corner.

260
00:09:36,767 --> 00:09:39,583
 Than using a stride or two to shift one window over.

261
00:09:39,839 --> 00:09:41,887
 One window over one window over.

262
00:09:42,143 --> 00:09:43,679
 And so on. And there a position.

263
00:09:43,935 --> 00:09:44,703
 So that gives you.

264
00:09:44,959 --> 00:09:45,983
 This first row.

265
00:09:46,239 --> 00:09:47,007
 And then as you.

266
00:09:47,263 --> 00:09:51,359
 You know goes down the image as well. That gives you all of these eight by eight by four.

267
00:09:51,615 --> 00:09:52,895
 Um, opens.

268
00:09:53,919 --> 00:09:56,735
 And and it's because of the max pooling of two.

269
00:09:56,991 --> 00:09:59,039
 That uh, this corresponds to running.

270
00:09:59,551 --> 00:10:01,855
 You're on your network with a stride of two.

271
00:10:02,111 --> 00:10:02,879
 On the original.

272
00:10:03,135 --> 00:10:03,647
 No image.

273
00:10:04,159 --> 00:10:06,463
 So just to recap, to implement.

274
00:10:06,719 --> 00:10:09,791
 Sliding windows. Previously. What you do is you.

275
00:10:10,047 --> 00:10:11,583
 Trump held a region.

276
00:10:11,839 --> 00:10:12,863
 Let's say this is um.

277
00:10:13,375 --> 00:10:14,655
 14 by 14.

278
00:10:14,911 --> 00:10:18,495
 And run that you are confident and do that for the next region over.

279
00:10:18,751 --> 00:10:24,639
 Then do that for the next 14 by 14 regions. And the next one, the next one, and the next one to the next one.

280
00:10:24,895 --> 00:10:26,687
 And so on. Until hopefully.

281
00:10:26,943 --> 00:10:28,479
 That one recognizes the.

282
00:10:28,735 --> 00:10:31,295
 The car. But now instead of doing it sequentially.

283
00:10:32,063 --> 00:10:35,391
 With this convolutional implementation that you saw in the previous slide.

284
00:10:35,647 --> 00:10:39,487
 You can implement the entire image. Or maybe 20 by 28.

285
00:10:39,999 --> 00:10:41,279
 And convolutional e.

286
00:10:41,535 --> 00:10:43,583
 Make all the predictions at the same time.

287
00:10:44,095 --> 00:10:47,423
 Uh, by one foot paws through this big content and hopefully have it right.

288
00:10:47,935 --> 00:10:48,703
 Nice the position of.

289
00:10:48,959 --> 00:10:49,471
 In the car.

290
00:10:50,751 --> 00:10:55,871
 So that's how you implement sliding windows, convolutional v, and it makes the whole thing.

291
00:10:56,127 --> 00:10:56,895
 Much more efficient.

292
00:10:57,663 --> 00:11:02,527
 Now, this album still has one weakness, which is the position of the bounding boxes.

293
00:11:02,783 --> 00:11:04,319
 Is not going to be too accurate.

294
00:11:04,831 --> 00:11:07,647
 In the next video. Let's see how you can fix that problem.
